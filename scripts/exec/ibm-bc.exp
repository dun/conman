#!/usr/bin/expect -f
###############################################################################
# Written by Chris Dunlap <cdunlap@llnl.gov>.
# Copyright (C) 2007-2023 Lawrence Livermore National Security, LLC.
# Copyright (C) 2001-2007 The Regents of the University of California.
# UCRL-CODE-2002-009.
#
# This file is part of ConMan: The Console Manager.
# For details, see <https://dun.github.io/conman/>.
###############################################################################
# This script connects to a console on a given blade in an IBM BladeCenter
# via Serial Over LAN (SOL) using the telnet protocol.
#
# This script can be specified in "conman.conf" in the following manner:
#
#   console name="zot" dev="/path/to/ibm-bc.exp HOST BLADE USER PSWD"
#
# HOST  is the hostname of the blade server.
# BLADE is the blade number associated with the console.
# USER  is the username being authenticated.
# PSWD  is the corresponding password.
#
# Since this command-line will persist in the process listing for the duration
# of the connection, passing sensitive information like PSWD in this manner is
# not recommended.  Instead, consider using either a command-line argument
# default or the password database (see below).
###############################################################################

##
# Set "exp_internal" to 1 to print diagnostics describing internal operations.
#   This is helpful in diagnosing pattern-match failures.
##
  exp_internal 0

##
# Set "log_user" to 1 to show the underlying dialogue establishing a connection
#   to the console.
##
  log_user 0

##
# The "timeout" specifies the number of seconds before the connection attempt
#   times-out and terminates the connection.
##
  set timeout 10

##
# If "bcmm_timeout" is set greater than or equal to 0, the telnet inactivity
#   timeout of the BladeCenter management module will be set to this value.
# This setting specifies the number of seconds of inactivity before the
#   interface session times-out; setting it to 0 disables the timeout.
##
  set bcmm_timeout 0

##
# If "idle_timeout" is set greater than 0, a "space-backspace" sequence will
#   be sent every ${idle_timeout} seconds after no output activity has been
#   detected in order to keep the connection alive.
# This setting should ideally be the same value as "bcmm_timeout".
##
  set idle_timeout 0

##
# If "session_override" is enabled, an existing connection to this console
#   session will be terminated and the new connection will be established.
#   Subsequent attempts to steal this console session will be thwarted.
# Otherwise, an existing connection to this console session will cause the new
#   connection to fail with "console session already in use".  If the console
#   session is not in use and the connection succeeds, the console session may
#   subsequently be stolen thereby causing this connection to terminate with
#   "console session stolen".
# Beware of dueling banjos if a given console session is overridden by more
#   than one process, as these processes will continuously steal the console
#   session from each other.
##
  set session_override 1

##
# The "password_db" specifies the location of the password database.
#   This avoids exposing sensitive information on the command-line without
#   needing to modify this script.
# Whitespace and lines beginning with '#' are ignored.  The file format is:
#   <host-regex> : <user> : <pswd>
##
  set password_db "/etc/conman.pswd"

##
# Command-line argument defaults can be specified here.  This avoids exposing
#   sensitive information on the command-line.
##
# set user "USERID"
# set pswd "PASSW0RD"

###############################################################################

set env(PATH) "/usr/bin:/bin"

proc get_password {host user index} {
  global password_db
  set db_pswd {}
  if {! [info exists password_db]} {
    return
  }
  if {[catch {open $password_db} input]} {
    return
  }
  while {[gets $input line] != -1} {
    if {[regexp {^[ \t]*#} $line]} {
      continue
    }
    set record [split $line ":"]
    set db_host [string trim [lindex $record 0]]
    if {[catch {regexp "^$db_host$" $host} got_host_match]} {
      continue
    }
    if {! $got_host_match && [string length $db_host]} {
      continue
    }
    set db_user [string trim [lindex $record 1]]
    if {[string compare $db_user $user]} {
      continue
    }
    set db_pswd [string trim [lindex $record $index]]
    break
  }
  close $input
  return $db_pswd
}

if {! $argc} {
  set prog [lindex [split $argv0 "/"] end]
  send_user "Usage: $prog <host> <blade> <user> <pswd>\r\n"
  exit 1
}
if {$argc > 0} {
  set host [lindex $argv 0]
}
if {$argc > 1} {
  set blade [lindex $argv 1]
}
if {$argc > 2} {
  set user [lindex $argv 2]
}
if {$argc > 3} {
  set pswd [lindex $argv 3]
}
set bcmm_bay 1
set cmd_sent 0
set connected 0
if {! [info exists host]} {
  send_user "Error: Unspecified hostname.\r\n"
  exit 1
}
if {! [info exists blade]} {
  send_user "Error: Unspecified blade number.\r\n"
  exit 1
}
if {! [info exists user]} {
  send_user "Error: Unspecified username.\r\n"
  exit 1
}
if {! [info exists pswd]} {
  set pswd [get_password $host $user 2]
  if {! [string length $pswd]} {
    send_user "Error: Unspecified password.\r\n"
    exit 1
  }
}
if {! [info exists bcmm_timeout] || ($bcmm_timeout < 0)} {
  set bcmm_timeout -1
}
if {! [info exists idle_timeout] || ($idle_timeout <= 0)} {
  set idle_timeout -1
}
set cmd "console -T system:blade\[$blade]"
if {[info exists session_override] && ($session_override > 0)} {
  append cmd " -o"
}
if {[catch "spawn telnet $host" spawn_result]} {
  send_user "Error: $spawn_result.\r\n"
  exit 1
}
expect {
  -gl "\u001b\\\[2J" {
    if {$connected == 0} {
      exp_continue -continue_timer
    }
  }
  -gl "Invalid login" {
    send_user "Error: Permission denied.\r\n"
    exit 1
  }
  -gl "Command not recognized" {
    send_user "Error: Command not recognized.\r\n"
    exit 1
  }
  -gl "Invalid target path" {
    send_user "Error: Invalid blade name.\r\n"
    exit 1
  }
  -gl "The target bay is out of range" {
    send_user "Error: Invalid blade number.\r\n"
    exit 1
  }
  -gl "SOL session is already active" {
    send_user "Error: Console session already in use.\r\n"
    exit 1
  }
  eof {
    send_user "Error: Connection closed by remote host.\r\n"
    exit 1
  }
  timeout {
    if {$connected == 0} {
      send_user "Error: Timed-out.\r\n"
      exit 1
    }
  }
  -nocase -gl "username: \$" {
    if {$connected == 0} {
      send "$user\r"
    }
    exp_continue -continue_timer
  }
  -nocase -gl "password: \$" {
    if {$connected == 0} {
      send "$pswd\r"
    }
    exp_continue -continue_timer
  }
  -nocase -gl "OK\r\n" {
    if {$cmd_sent != 0} {
      incr bcmm_bay
      set cmd_sent 0
    }
    exp_continue -continue_timer
  }
  -nocase -gl "The target bay is empty.\r\n" {
    if {$bcmm_bay == 0} {
      send_user "Error: No blade in specified slot.\r\n"
      exit 1
    } elseif {$cmd_sent != 0} {
      set bcmm_bay 0
      set bcmm_timeout -1
      set cmd_sent 0
    }
    exp_continue -continue_timer
  }
  -nocase -gl "Command cannot be issued to this target." {
    if {$cmd_sent != 0} {
      set bcmm_timeout -1
      set cmd_sent 0
    }
    exp_continue -continue_timer
  }
  -nocase -gl "User does not have the authority to issue this command.\r\n" {
    if {$cmd_sent != 0} {
      set bcmm_timeout -1
      set cmd_sent 0
    }
    exp_continue -continue_timer
  }
  -nocase -gl "system> \$" {
    if {($bcmm_timeout >= 0) && ($cmd_sent == 0)} {
      send "telnetcfg -T system:mm\[$bcmm_bay] -t $bcmm_timeout\r"
      incr cmd_sent
    } elseif {($connected == 0) && ($cmd_sent == 0)} {
      send "$cmd\r"
      incr connected
    } else {
      send_user "Error: Unrecognized response.\r\n"
      exit 1
    }
    exp_continue -continue_timer
  }
  -re "\[^\r]*\r+\n" {
    exp_continue -continue_timer
  }
}
send_user "Connection established via telnet (pid $spawn_result).\r\n"

set timeout 2
interact {
  # Replace "&B" with serial-break.
  "&B" {
    send "\035send brk\r\n"
    expect "telnet> send brk"
  }
  # Match subsequent patterns against spawned process, not user's keystrokes.
  -o
  # Send "space-backspace" sequence after ${idle_timeout} seconds of inactivity
  #   in order to keep the connection alive.
  timeout $idle_timeout {
    send " \177"
  }
  # Disable "ESC (" sequence for stopping the console session and returning to
  #   the BladeCenter management module prompt.  If "session_override" is set,
  #   this will also prevent the console session from being stolen.
  -re "\r\nsystem> \$" {
    send "$cmd\r"
    expect {
      -gl "\r\nSOL session is already active\r\nsystem> \$" {
        send_user "\r\nConsole session stolen.\r\n"
        exit 1
      }
      -gl "\u001b\\\[2J"
    }
  }
}
